{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/SwitMe/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"D:/SwitMe/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SwitMe/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\n\nexport var FrameImpl = /*#__PURE__*/function () {\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  function FrameImpl(params) {\n    _classCallCheck(this, FrameImpl);\n\n    var command = params.command,\n        headers = params.headers,\n        body = params.body,\n        binaryBody = params.binaryBody,\n        escapeHeaderValues = params.escapeHeaderValues,\n        skipContentLengthHeader = params.skipContentLengthHeader;\n    this.command = command;\n    this.headers = Object.assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n  /**\n   * body of the frame\n   */\n\n\n  _createClass(FrameImpl, [{\n    key: \"body\",\n    get: function get() {\n      if (!this._body && this.isBinaryBody) {\n        this._body = new TextDecoder().decode(this._binaryBody);\n      }\n\n      return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n\n  }, {\n    key: \"binaryBody\",\n    get: function get() {\n      if (!this._binaryBody && !this.isBinaryBody) {\n        this._binaryBody = new TextEncoder().encode(this._body);\n      }\n\n      return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"toString\",\n    value:\n    /**\n     * @internal\n     */\n    function toString() {\n      return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var cmdAndHeaders = this.serializeCmdAndHeaders();\n\n      if (this.isBinaryBody) {\n        return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n      } else {\n        return cmdAndHeaders + this._body + BYTE.NULL;\n      }\n    }\n  }, {\n    key: \"serializeCmdAndHeaders\",\n    value: function serializeCmdAndHeaders() {\n      var lines = [this.command];\n\n      if (this.skipContentLengthHeader) {\n        delete this.headers['content-length'];\n      }\n\n      for (var _i = 0, _Object$keys = Object.keys(this.headers || {}); _i < _Object$keys.length; _i++) {\n        var name = _Object$keys[_i];\n        var value = this.headers[name];\n\n        if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n          lines.push(\"\".concat(name, \":\").concat(FrameImpl.hdrValueEscape(\"\".concat(value))));\n        } else {\n          lines.push(\"\".concat(name, \":\").concat(value));\n        }\n      }\n\n      if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n        lines.push(\"content-length:\".concat(this.bodyLength()));\n      }\n\n      return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n  }, {\n    key: \"isBodyEmpty\",\n    value: function isBodyEmpty() {\n      return this.bodyLength() === 0;\n    }\n  }, {\n    key: \"bodyLength\",\n    value: function bodyLength() {\n      var binaryBody = this.binaryBody;\n      return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n\n  }], [{\n    key: \"fromRawFrame\",\n    value: function fromRawFrame(rawFrame, escapeHeaderValues) {\n      var headers = {};\n\n      var trim = function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n      }; // In case of repeated headers, as per standards, first value need to be used\n\n\n      var _iterator = _createForOfIteratorHelper(rawFrame.headers.reverse()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var header = _step.value;\n          var idx = header.indexOf(':');\n          var key = trim(header[0]);\n          var value = trim(header[1]);\n\n          if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n            value = FrameImpl.hdrValueUnEscape(value);\n          }\n\n          headers[key] = value;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return new FrameImpl({\n        command: rawFrame.command,\n        headers: headers,\n        binaryBody: rawFrame.binaryBody,\n        escapeHeaderValues: escapeHeaderValues\n      });\n    }\n  }, {\n    key: \"sizeOfUTF8\",\n    value: function sizeOfUTF8(s) {\n      return s ? new TextEncoder().encode(s).length : 0;\n    }\n  }, {\n    key: \"toUnit8Array\",\n    value: function toUnit8Array(cmdAndHeaders, binaryBody) {\n      var uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n      var nullTerminator = new Uint8Array([0]);\n      var uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n      uint8Frame.set(uint8CmdAndHeaders);\n      uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n      uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n      return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"marshall\",\n    value: function marshall(params) {\n      var frame = new FrameImpl(params);\n      return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n\n  }, {\n    key: \"hdrValueEscape\",\n    value: function hdrValueEscape(str) {\n      return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n\n  }, {\n    key: \"hdrValueUnEscape\",\n    value: function hdrValueUnEscape(str) {\n      return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n    }\n  }]);\n\n  return FrameImpl;\n}();","map":{"version":3,"sources":["../src/frame-impl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map"]},"metadata":{},"sourceType":"module"}