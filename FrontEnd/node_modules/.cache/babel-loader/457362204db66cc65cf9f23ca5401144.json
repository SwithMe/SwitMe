{"ast":null,"code":"import _slicedToArray from \"D:/SwitMe/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:/SwitMe/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/SwitMe/FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\n\nexport var StompHandler = /*#__PURE__*/function () {\n  function StompHandler(_client, _webSocket) {\n    var _this = this;\n\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, StompHandler);\n\n    this._client = _client;\n    this._webSocket = _webSocket;\n    this._serverFrameHandlers = {\n      // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n      CONNECTED: function CONNECTED(frame) {\n        _this.debug(\"connected to server \".concat(frame.headers.server));\n\n        _this._connected = true;\n        _this._connectedVersion = frame.headers.version; // STOMP version 1.2 needs header values to be escaped\n\n        if (_this._connectedVersion === Versions.V1_2) {\n          _this._escapeHeaderValues = true;\n        }\n\n        _this._setupHeartbeat(frame.headers);\n\n        _this.onConnect(frame);\n      },\n      // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n      MESSAGE: function MESSAGE(frame) {\n        // the callback is registered when the client calls\n        // `subscribe()`.\n        // If there is no registered subscription for the received message,\n        // the default `onUnhandledMessage` callback is used that the client can set.\n        // This is useful for subscriptions that are automatically created\n        // on the browser side (e.g. [RabbitMQ's temporary\n        // queues](http://www.rabbitmq.com/stomp.html)).\n        var subscription = frame.headers.subscription;\n        var onReceive = _this._subscriptions[subscription] || _this.onUnhandledMessage; // bless the frame to be a Message\n\n        var message = frame;\n        var client = _this;\n        var messageId = _this._connectedVersion === Versions.V1_2 ? message.headers.ack : message.headers['message-id']; // add `ack()` and `nack()` methods directly to the returned frame\n        // so that a simple call to `message.ack()` can acknowledge the message.\n\n        message.ack = function () {\n          var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.ack(messageId, subscription, headers);\n        };\n\n        message.nack = function () {\n          var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return client.nack(messageId, subscription, headers);\n        };\n\n        onReceive(message);\n      },\n      // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n      RECEIPT: function RECEIPT(frame) {\n        var callback = _this._receiptWatchers[frame.headers['receipt-id']];\n\n        if (callback) {\n          callback(frame); // Server will acknowledge only once, remove the callback\n\n          delete _this._receiptWatchers[frame.headers['receipt-id']];\n        } else {\n          _this.onUnhandledReceipt(frame);\n        }\n      },\n      // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n      ERROR: function ERROR(frame) {\n        _this.onStompError(frame);\n      }\n    }; // used to index subscribers\n\n    this._counter = 0; // subscription callbacks indexed by subscriber's ID\n\n    this._subscriptions = {}; // receipt-watchers indexed by receipts-ids\n\n    this._receiptWatchers = {};\n    this._partialData = '';\n    this._escapeHeaderValues = false;\n    this._lastServerActivityTS = Date.now();\n    this.configure(config);\n  }\n\n  _createClass(StompHandler, [{\n    key: \"connectedVersion\",\n    get: function get() {\n      return this._connectedVersion;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this._connected;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(conf) {\n      // bulk assign all properties to this\n      Object.assign(this, conf);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      var parser = new Parser( // On Frame\n      function (rawFrame) {\n        var frame = FrameImpl.fromRawFrame(rawFrame, _this2._escapeHeaderValues); // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n\n        if (!_this2.logRawCommunication) {\n          _this2.debug(\"<<< \".concat(frame));\n        }\n\n        var serverFrameHandler = _this2._serverFrameHandlers[frame.command] || _this2.onUnhandledFrame;\n        serverFrameHandler(frame);\n      }, // On Incoming Ping\n      function () {\n        _this2.debug('<<< PONG');\n      });\n\n      this._webSocket.onmessage = function (evt) {\n        _this2.debug('Received data');\n\n        _this2._lastServerActivityTS = Date.now();\n\n        if (_this2.logRawCommunication) {\n          var rawChunkAsString = evt.data instanceof ArrayBuffer ? new TextDecoder().decode(evt.data) : evt.data;\n\n          _this2.debug(\"<<< \".concat(rawChunkAsString));\n        }\n\n        parser.parseChunk(evt.data, _this2.appendMissingNULLonIncoming);\n      };\n\n      this._onclose = function (closeEvent) {\n        _this2.debug(\"Connection closed to \".concat(_this2._client.brokerURL));\n\n        _this2._cleanUp();\n\n        _this2.onWebSocketClose(closeEvent);\n      };\n\n      this._webSocket.onclose = this._onclose;\n\n      this._webSocket.onerror = function (errorEvent) {\n        _this2.onWebSocketError(errorEvent);\n      };\n\n      this._webSocket.onopen = function () {\n        // Clone before updating\n        var connectHeaders = Object.assign({}, _this2.connectHeaders);\n\n        _this2.debug('Web Socket Opened...');\n\n        connectHeaders['accept-version'] = _this2.stompVersions.supportedVersions();\n        connectHeaders['heart-beat'] = [_this2.heartbeatOutgoing, _this2.heartbeatIncoming].join(',');\n\n        _this2._transmit({\n          command: 'CONNECT',\n          headers: connectHeaders\n        });\n      };\n    }\n  }, {\n    key: \"_setupHeartbeat\",\n    value: function _setupHeartbeat(headers) {\n      var _this3 = this;\n\n      if (headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2) {\n        return;\n      } // It is valid for the server to not send this header\n      // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n\n\n      if (!headers['heart-beat']) {\n        return;\n      } // heart-beat header received from the server looks like:\n      //\n      //     heart-beat: sx, sy\n\n\n      var _headers$heartBeat$s = headers['heart-beat'].split(',').map(function (v) {\n        return parseInt(v, 10);\n      }),\n          _headers$heartBeat$s2 = _slicedToArray(_headers$heartBeat$s, 2),\n          serverOutgoing = _headers$heartBeat$s2[0],\n          serverIncoming = _headers$heartBeat$s2[1];\n\n      if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n        var ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n        this.debug(\"send PING every \".concat(ttl, \"ms\"));\n        this._pinger = setInterval(function () {\n          if (_this3._webSocket.readyState === StompSocketState.OPEN) {\n            _this3._webSocket.send(BYTE.LF);\n\n            _this3.debug('>>> PING');\n          }\n        }, ttl);\n      }\n\n      if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n        var _ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n\n        this.debug(\"check PONG every \".concat(_ttl, \"ms\"));\n        this._ponger = setInterval(function () {\n          var delta = Date.now() - _this3._lastServerActivityTS; // We wait twice the TTL to be flexible on window's setInterval calls\n\n\n          if (delta > _ttl * 2) {\n            _this3.debug(\"did not receive server activity for the last \".concat(delta, \"ms\"));\n\n            _this3._closeOrDiscardWebsocket();\n          }\n        }, _ttl);\n      }\n    }\n  }, {\n    key: \"_closeOrDiscardWebsocket\",\n    value: function _closeOrDiscardWebsocket() {\n      if (this.discardWebsocketOnCommFailure) {\n        this.debug(\"Discarding websocket, the underlying socket may linger for a while\");\n\n        this._discardWebsocket();\n      } else {\n        this.debug(\"Issuing close on the websocket\");\n\n        this._closeWebsocket();\n      }\n    }\n  }, {\n    key: \"forceDisconnect\",\n    value: function forceDisconnect() {\n      if (this._webSocket) {\n        if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n          this._closeOrDiscardWebsocket();\n        }\n      }\n    }\n  }, {\n    key: \"_closeWebsocket\",\n    value: function _closeWebsocket() {\n      this._webSocket.onmessage = function () {}; // ignore messages\n\n\n      this._webSocket.close();\n    }\n  }, {\n    key: \"_discardWebsocket\",\n    value: function _discardWebsocket() {\n      var _this4 = this;\n\n      if (!this._webSocket.terminate) {\n        augmentWebsocket(this._webSocket, function (msg) {\n          return _this4.debug(msg);\n        });\n      }\n\n      this._webSocket.terminate();\n    }\n  }, {\n    key: \"_transmit\",\n    value: function _transmit(params) {\n      var command = params.command,\n          headers = params.headers,\n          body = params.body,\n          binaryBody = params.binaryBody,\n          skipContentLengthHeader = params.skipContentLengthHeader;\n      var frame = new FrameImpl({\n        command: command,\n        headers: headers,\n        body: body,\n        binaryBody: binaryBody,\n        escapeHeaderValues: this._escapeHeaderValues,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n      var rawChunk = frame.serialize();\n\n      if (this.logRawCommunication) {\n        this.debug(\">>> \".concat(rawChunk));\n      } else {\n        this.debug(\">>> \".concat(frame));\n      }\n\n      if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n        rawChunk = new TextEncoder().encode(rawChunk);\n      }\n\n      if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n        this._webSocket.send(rawChunk);\n      } else {\n        var out = rawChunk;\n\n        while (out.length > 0) {\n          var chunk = out.substring(0, this.maxWebSocketChunkSize);\n          out = out.substring(this.maxWebSocketChunkSize);\n\n          this._webSocket.send(chunk);\n\n          this.debug(\"chunk sent = \".concat(chunk.length, \", remaining = \").concat(out.length));\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this5 = this;\n\n      if (this.connected) {\n        try {\n          // clone before updating\n          var disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n\n          if (!disconnectHeaders.receipt) {\n            disconnectHeaders.receipt = \"close-\".concat(this._counter++);\n          }\n\n          this.watchForReceipt(disconnectHeaders.receipt, function (frame) {\n            _this5._closeWebsocket();\n\n            _this5._cleanUp();\n\n            _this5.onDisconnect(frame);\n          });\n\n          this._transmit({\n            command: 'DISCONNECT',\n            headers: disconnectHeaders\n          });\n        } catch (error) {\n          this.debug(\"Ignoring error during disconnect \".concat(error));\n        }\n      } else {\n        if (this._webSocket.readyState === StompSocketState.CONNECTING || this._webSocket.readyState === StompSocketState.OPEN) {\n          this._closeWebsocket();\n        }\n      }\n    }\n  }, {\n    key: \"_cleanUp\",\n    value: function _cleanUp() {\n      this._connected = false;\n\n      if (this._pinger) {\n        clearInterval(this._pinger);\n      }\n\n      if (this._ponger) {\n        clearInterval(this._ponger);\n      }\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(params) {\n      var destination = params.destination,\n          headers = params.headers,\n          body = params.body,\n          binaryBody = params.binaryBody,\n          skipContentLengthHeader = params.skipContentLengthHeader;\n      var hdrs = Object.assign({\n        destination: destination\n      }, headers);\n\n      this._transmit({\n        command: 'SEND',\n        headers: hdrs,\n        body: body,\n        binaryBody: binaryBody,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n    }\n  }, {\n    key: \"watchForReceipt\",\n    value: function watchForReceipt(receiptId, callback) {\n      this._receiptWatchers[receiptId] = callback;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(destination, callback) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n\n      if (!headers.id) {\n        headers.id = \"sub-\".concat(this._counter++);\n      }\n\n      headers.destination = destination;\n      this._subscriptions[headers.id] = callback;\n\n      this._transmit({\n        command: 'SUBSCRIBE',\n        headers: headers\n      });\n\n      var client = this;\n      return {\n        id: headers.id,\n        unsubscribe: function unsubscribe(hdrs) {\n          return client.unsubscribe(headers.id, hdrs);\n        }\n      };\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(id) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      headers = Object.assign({}, headers);\n      delete this._subscriptions[id];\n      headers.id = id;\n\n      this._transmit({\n        command: 'UNSUBSCRIBE',\n        headers: headers\n      });\n    }\n  }, {\n    key: \"begin\",\n    value: function begin(transactionId) {\n      var txId = transactionId || \"tx-\".concat(this._counter++);\n\n      this._transmit({\n        command: 'BEGIN',\n        headers: {\n          transaction: txId\n        }\n      });\n\n      var client = this;\n      return {\n        id: txId,\n        commit: function commit() {\n          client.commit(txId);\n        },\n        abort: function abort() {\n          client.abort(txId);\n        }\n      };\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(transactionId) {\n      this._transmit({\n        command: 'COMMIT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(transactionId) {\n      this._transmit({\n        command: 'ABORT',\n        headers: {\n          transaction: transactionId\n        }\n      });\n    }\n  }, {\n    key: \"ack\",\n    value: function ack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n\n      headers.subscription = subscriptionId;\n\n      this._transmit({\n        command: 'ACK',\n        headers: headers\n      });\n    }\n  }, {\n    key: \"nack\",\n    value: function nack(messageId, subscriptionId) {\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      headers = Object.assign({}, headers);\n\n      if (this._connectedVersion === Versions.V1_2) {\n        headers.id = messageId;\n      } else {\n        headers['message-id'] = messageId;\n      }\n\n      headers.subscription = subscriptionId;\n      return this._transmit({\n        command: 'NACK',\n        headers: headers\n      });\n    }\n  }]);\n\n  return StompHandler;\n}();","map":{"version":3,"sources":["../src/stomp-handler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState, } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config = {}) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.configure(config);\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._client.brokerURL}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onclose = this._onclose;\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug(\"Discarding websocket, the underlying socket may linger for a while\");\n            this._discardWebsocket();\n        }\n        else {\n            this.debug(\"Issuing close on the websocket\");\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    _discardWebsocket() {\n        if (!this._webSocket.terminate) {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader, } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader, } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map"]},"metadata":{},"sourceType":"module"}